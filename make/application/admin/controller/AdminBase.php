<?php
/**
 * 后台基类
 */
namespace app\admin\controller;
use app\common\controller\Base;
use think\Cache;
use think\Response;
use think\Session;
class AdminBase extends Base
{
    /**
     * 入口url跳转
     * @var
     */
    protected $entranceUrl;

    // 初始化方法
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->entranceUrl = $this->request->baseFile();
        if (!isLogin()) $this->redirect($this->entranceUrl . '/login');
        $this->assign([
            'adminMenu' => $this->getAuthMenu(config('menu.adminMenu')),
            'entranceUrl' => $this->entranceUrl,
        ]);
    }

    /**
     * 会员等级
     * @param int $type
     * @return array
     */
    protected function userLevel($type = 1)
    {
        if ($type == 1) {
            return [
                '1' => '普通会员',
                '2' => 'VIP',
                '3' => '高级VIP',
            ];
        } else {
            return [
                '1' => '普通会员',
                '2' => 'VIP',
                '3' => '高级VIP',
                '4' => '服务中心',
            ];
        }
    }

    /**
     * 收费业务
     * @return array
     */
    protected function getBusiness()
    {
        return [
            '1' => '会员收费',
            '2' => '广告任务',
//            '3' => '静态分佣'
        ];
    }

    /**
     * 输出json数组
     * @param int $code
     * @param string $msg
     * @param array $data
     * @return array
     */
    protected function outJson($code = 0, $msg = '', $data = [])
    {
        if (!$data) {
            return [
                "code" => $code,
                "msg" =>  $msg
            ];
        } else {
            return [
                "code" => $code,
                "msg" =>  $msg,
                "data" => $data
            ];
        }
    }

    private function getAuthMenu($menuData,$module = 'admin')
    {
        $admin = Session::get('admin');
        $authRule = \auth\Auth::instance()->getAuthList($admin['uid'],1);
        foreach ($menuData as $k => $v) {
            $v_rule_0 = $module . '/' . strtolower($v['controller']);
            if (in_array($v_rule_0,$authRule)) {
                $menuData[$k]['display'] = 'block';
            } else {
                $menuData[$k]['display'] = 'hidden';
            }
            if (!$v['line']) {
                foreach ($v['live_1'] as $k1 => $v1) {
                    $v_rule_1 = $module . '/' . strtolower($v1['controller']);
                    if (in_array($v_rule_1,$authRule)) {
                        $menuData[$k]['live_1'][$k1]['display'] = 'block';
                    } else {
                        $menuData[$k]['live_1'][$k1]['display'] = 'hidden';
                    }
                    if ($v1['live_2']) {
                        foreach ($v1['live_2'] as $k2 => $v2) {
                            if ($v2['live_3']) {
                                $v_rule_2 = $module . '/' . strtolower($v2['controller']);
                            } else {
                                $v_rule_2 = $module . '/' . strtolower($v2['controller']) . '/' . strtolower($v2['action']);
                            }
                            if (in_array($v_rule_2,$authRule)) {
                                $menuData[$k]['live_1'][$k1]['live_2'][$k2]['display'] = 'block';
                            } else {
                                $menuData[$k]['live_1'][$k1]['live_2'][$k2]['display'] = 'hidden';
                            }
                            if ($v2['live_3']) {
                                foreach ($v2['live_3'] as $k3 => $v3) {
                                    $v_rule_3 = $module . '/' . strtolower($v3['controller']) . '/' . strtolower($v3['action']);
                                    if (in_array($v_rule_3,$authRule)) {
                                        $menuData[$k]['live_1'][$k1]['live_2'][$k2]['live_3'][$k3]['display'] = 'block';
                                    } else {
                                        $menuData[$k]['live_1'][$k1]['live_2'][$k2]['live_3'][$k3]['display'] = 'hidden';
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return $menuData;
    }


    /**
     * 图片上传
     * @param string $fileVal
     * @param string $fileName
     * @return array
     */
    protected function fileUploads($fileVal = "file", $fileName = 'task')
    {
        // 获取表单上传文件
        $file = $this->request->file($fileVal);
        // 移动到框架应用根目录/public/uploads/shopimg 目录下
        // 1M = 1048576 b字节
        $info = $file
            ->validate(['size' => 2097152,'ext'=>'jpg,jpeg,png'])
            ->move(ROOT_PATH . 'public' . DS . 'uploads' . DS . $fileName);
        if($info){//上传成功后
            // 获取文件路径名
            $saveName = str_replace('\\','/',$info->getSaveName());
            // 图片文件完整路径
            $imgSrc = "./uploads/" . $fileName . "/" . $saveName;
            // 单图上传 数据返回
            return ['status' => 1, 'msg' => substr($imgSrc,1)];
        }else{
            // 上传失败获取错误信息
            $info = $file->getInfo();
            $msg = "‘" . $info['name'] .  "’" . $file->getError();
            return ['status' => 0, 'msg' => $msg];
        }
    }

    //添加消息
    protected function insertMessage($data = array()){

        return Db::name('message_log')->insert($data);
    }
}
